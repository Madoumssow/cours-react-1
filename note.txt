1- npx create-react-app "nom de l'app en miniscule(my-app ou my_app)"
2- npm init react-app "nom de l'app"
3- cd "nom de l'app"
4- code .
5- npm start
6- ERROR :
        Cannot find module 'ajv/dist/compile/codegen'
        Require stack:
        - C:\Users\PC\Desktop\la-maison-jungle\node_modules\ajv-keywords\dist\definitions\typeof.js
        - C:\Users\PC\Desktop\la-maison-jungle\node_modules\ajv-keywords\dist\keywords\typeof.js
        - C:\Users\PC\Desktop\la-maison-jungle\node_modules\ajv-keywords\dist\keywords\index.js
        - C:\Users\PC\Desktop\la-maison-jungle\node_modules\ajv-keywords\dist\index.js
        - C:\Users\PC\Desktop\la-maison-jungle\node_modules\schema-utils\dist\validate.js
        - C:\Users\PC\Desktop\la-maison-jungle\node_modules\schema-utils\dist\index.js
        - C:\Users\PC\Desktop\la-maison-jungle\node_modules\webpack-dev-server\lib\Server.js
        - C:\Users\PC\Desktop\la-maison-jungle\node_modules\react-scripts\scripts\start.js
    voici ce qu'il faut faire :

    L'erreur que vous rencontrez indique qu'il manque le module ajv/dist/compile/codegen, et cela est probablement d√ª √† une incompatibilit√© de version entre les modules ajv et ajv-keywords. Voici les √©tapes √† suivre pour r√©soudre ce probl√®me :

        1. V√©rifier les versions de ajv et ajv-keywords
        Assurez-vous que les versions de ajv et ajv-keywords que vous utilisez sont compatibles. Si vous utilisez ajv version 7 ou plus, vous devrez peut-√™tre mettre √† jour les d√©pendances.

        Ex√©cutez la commande suivante pour v√©rifier les versions install√©es :

        bash
        Copy code
       *** npm list ajv ajv-keywords
        Si ajv est en version 7 ou plus, assurez-vous que ajv-keywords est √©galement √† jour.

        2. Mettre √† jour ou installer les d√©pendances manquantes
        Mettez √† jour ajv et ajv-keywords avec les derni√®res versions compatibles :

        bash
        Copy code
       *** npm install ajv@latest ajv-keywords@latest
        3. R√©installer les modules Node
        Il est possible que l'installation des d√©pendances soit corrompue. Supprimez le dossier node_modules et r√©installez les d√©pendances :

        bash
        Copy code
       *** rm -rf node_modules
       *** npm install
        4. V√©rifier la compatibilit√© avec schema-utils
        Si la mise √† jour d'ajv et ajv-keywords ne r√©sout pas le probl√®me, v√©rifiez si la version de schema-utils est compatible avec celle de ajv. Vous pouvez v√©rifier la version de schema-utils avec :

        bash
        Copy code
       *** npm list schema-utils
        Mettez √† jour schema-utils si n√©cessaire :

        bash
        Copy code
        *** npm install schema-utils@latest
        5. Nettoyer le cache npm
        Parfois, nettoyer le cache de npm peut r√©soudre des probl√®mes li√©s aux d√©pendances :

        bash
        Copy code
        *** npm cache clean --force
        Une fois que vous avez essay√© ces √©tapes, relancez votre serveur de d√©veloppement pour voir si l'erreur est corrig√©e.


        //*********************************** Revision *****************************************

        ****************************************** I  ******************************************
        Comprendre le fonctionnement de React
Question 1
Parmi les √©l√©ments de cette liste, lesquels sont des frameworks ou biblioth√®ques JavaScript ?

Attention, plusieurs r√©ponses sont possibles.

Angular

VueJS

React

PHP
Ici vous avez des frameworks JavaScript et un langage de programmation qui n'a rien √† voir : PHP. L'intrus est donc bien PHP ici.

Question 2
Pour transformer un fichier HTML en app React sur CodePen, les bonnes pratiques consistent √† :

Attention, plusieurs r√©ponses sont possibles.

d√©clarer dans le HTML o√π l'app React vivra, par exemple avec un className.

importer les liens CDN React et ReactDOM.

attacher l'app React au HTML avec ReactDOM.render(<MonApp />, document.getElementById( 'monId')).

param√©trer Babel.
Pour transformer un fichier HTML en app React sur CodePen, il faut importer les liens CDN pour React et ReactDOM, que l'on peut trouver dans la documentation de React.

De la m√™me mani√®re, pour coder au mieux, on doit utiliser Babel.

Ensuite, il faut ancrer l'app React au HTML avec ReactDOM.render, mais pour √ßa on a besoin de lui pr√©ciser o√π s'attacher. Une bonne solution est d'utiliser un id. Mais un className, m√™me si ce n'est pas une bonne mani√®re de faire, pourrait fonctionner.

Il fallait donc s√©lectionner les r√©ponses 2, 3 et 4.

Question 3
Quels sont les atouts de React ?

Attention, plusieurs r√©ponses sont possibles.

Toutes les librairies n√©cessaires pour un nouveau projet sont fournies d'embl√©e.

React est particuli√®rement modulaire.

Sa syntaxe en JSX est tr√®s efficace √† utiliser.

React est largement utilis√©, sa ma√Ætrise permet donc de b√©n√©ficier de nombreuses opportunit√©s professionnelles.
Chaque langage a ses atouts et ses inconv√©nients. On peut compter parmi les atouts de React : 

sa modularit√©, qui permet de choisir les bons outils en fonction du projet √† d√©velopper ;
les opportunit√©s professionnelles que React offre ;
sa syntaxe, cr√©√©e par les √©quipes de React, le JSX, qui r√©unit la structure, le style et les interactions, est tr√®s efficace. 
En revanche, du fait de la modularit√© de React, il faut souvent se poser la question des outils qui seront utilis√©s pour d√©velopper son projet. 

Les bonnes r√©ponses sont donc les 2, 3 et 4 !

Question 4
React est un excellent outil pour :


cr√©er des bases de donn√©es.

construire une interface utilisateur √† partir de composants r√©utilisables.

cr√©er un algorithme de machine learning.

cr√©er le design d'une maquette.
React est une technologie frontend : elle permet de coder en composants afin de cr√©er une interface utilisateur. Les technologies √©num√©r√©es ici en options 1 et 3 requi√®rent davantage des langages backend. La derni√®re option, quant √† elle, correspond davantage √† du design qu'√† du code. Il s'agit donc de la r√©ponse 2.

Question 5
J'ai cr√©√© un composant :

function MyHeader() {
    return <div>Whaou ü§©</div>
}
Je le r√©utilise dans le code ci-dessous :

ReactDOM.render(< myHeader><div>So much wow</div>, document.getElementById('root'))
Rien ne s'affiche üò≠ et mon CodePen m'indique qu'il y a des erreurs. Qu'est-ce qui se passe ?

Attention, plusieurs r√©ponses sont possibles.

Le nom d'un composant doit commencer par une majuscule.

Les composants doivent toujours √™tre wrapp√©s par un seul composant parent.

La balise de MyHeader n'est pas ferm√©e par un /.

Un composant ne peut pas √™tre utilis√© dans un autre composant.
Plusieurs choses posent probl√®me ici. 

Certaines r√®gles sont √† respecter en JSX : 

- le nom d'un composant doit commencer par une majuscule ;

- les composants doivent toujours √™tre wrapp√©s par un seul composant parent ;

- les balises doivent toujours √™tre ferm√©es.

Il fallait donc choisir les r√©ponses 1, 2 et 3.

Il aurait fallu utiliser le composant de la mani√®re suivante pour que cela fonctionne :

ReactDOM.render(<div>< MyHeader /><div>So much wow</div></div>, document.getElementById('root'))

Question 6
Parmi les snippets de code ci-dessous, lesquels permettent de d√©clarer un composant React ?

Attention, plusieurs r√©ponses sont possibles.

const MyComponent = () => (<div>Hello World</div>)

function MyComponent() { return (<div>Hello World</div>)}

class MyComponent extends React.Component {render() {return <div>Hello World</div>}}

const MyComponent = React.create('div', {}, 'Hello World')
Il existe plusieurs syntaxes pour d√©clarer un composant.
Un composant peut √™tre d√©clar√© √† l'aide d'une fonction. Dans ce cas, la syntaxe de fonction fl√©ch√©e ou de fonction sont toutes les deux possibles. Il est √©galement possible d‚Äôutiliser une classe avec la syntaxe :

class MyComponent extends React.Component {render() {return <div>Hello World</div>}}
M√™me si elle n‚Äôest quasiment jamais utilis√©e directement, la syntaxe createElement  permet de d√©clarer un composant React. Sauf qu'ici, si vous regardez bien, on n'a pas utilis√© createElement  , mais juste create  ... qui n'existe pas. Les bonnes r√©ponses √©taient donc la 1, la 2 et la 3. 

Question 7
J‚Äôai impl√©ment√© un nouveau composant :

function Subtitle() {
    const myText = ‚ÄúAchetez toutes les plantes dont vous avez toujours r√™v√©‚Äù
    return <div>myText</div>
}
Mais aucune trace de mon texte. √Ä la place, je me retrouve avec √©crit ‚ÄúmyText‚Äù √† l‚Äô√©cran. Qu‚Äôest-ce qui se passe ü§î ?


Le composant n'est pas bien export√©.

Il n‚Äôest pas possible d‚Äôafficher des strings directement dans un composant.

JSX ne permet pas d'√©valuer du JavaScript directement.

Il n‚Äôy a pas d‚Äôaccolades.
En React, ce sont les accolades qui permettent d‚Äô√©valuer et afficher du JavaScript directement dans le JSX. Ici, il aurait donc fallu √©crire :  {myText}  pour que √ßa fonctionne. La bonne r√©ponse √©tait donc la derni√®re r√©ponse.

Question 8
La notation entre accolades {}  peut √™tre utilis√©e dans le JSX pour :

Attention, plusieurs r√©ponses sont possibles.

Afficher une variable texte ou un nombre.

D√©clarer une variable.

√âvaluer une expression JS permettant de faire un calcul de maths.

√âcrire du HTML.
La notation entre accolades, utilis√©e en React, permet :

d‚Äôafficher une variable texte ou nombre directement dans un composant ;
d‚Äô√©valuer une expression JavaScript pour faire un calcul de maths.
Les bonnes r√©ponses √©taient donc la 1 et la 3.

        ****************************************** II ******************************************
        Question 1
Create React App est un outil qui sert √† :


cr√©er une base de code avec des outils pr√©configur√©s.

installer React Router.

√©crire du code.

styliser une application node.
Create React App est une bo√Æte √† outils permettant d'initialiser une base de code avec tous les outils n√©cessaires au d√©veloppement tels que Webpack, Babel et ESLint, d√©j√† pr√©configur√©s.

Question 2
La base de code que nous avons initialis√©e contient un certain nombre de fichiers. Le fichier  package.json   a une importance particuli√®re puisqu'il permet de :

Attention, plusieurs r√©ponses sont possibles.

G√©rer les d√©pendances.

G√©rer les scripts.

Importer les fichiers n√©cessaires.

Connecter React au  index.html  .

Lancer les tests automatis√©s.

Lancer le build de l‚Äôapplication.

G√©n√©rer un fichier HTML unique.

Transformer votre code JavaScript en PHP.
Le fichier  package.json   permet de g√©rer les d√©pendances de votre projet, et de lister les scripts qui peuvent √™tre ex√©cut√©s avec  yarn   (entre autres). √áa permet notamment de lancer les tests automatis√©s avec  yarn test   ou de lancer le build de votre application avec  yarn build  .

En revanche, il n'importe pas de fichier. Dans Create React App, c'est Webpack qui importe nos fichiers, et qui g√©n√®re un fichier HTML unique.

Pour ce qui concerne le fait d'int√©grer React dans le fichier HTML, c'est le fichier  index.js   qui s'en charge. Ici, pas de PHP, donc la derni√®re option ne fonctionnait pas.

Question 3
Vous avez un tableau de strings pour vos cat√©gories de plantes comme ci-dessous :

const categories = ["plantes d'ombre", "cactus", "plantes d'ext√©rieur", "plantes pour d√©butants", "plantes fleuries"]
Quel snippet de code en JSX vous permet de cr√©er un composant qui g√©n√®re facilement et proprement une liste d'√©l√©ments React ? Attention, le code ne doit produire aucune erreur dans la console !


<ul>
    {categories.map(category => <li>
    {category}
    </li>;)}
</ul>
 

<ul>
    {categories.map((category, index) => <li key={`${category}-${index}`}>
    {category}
    </li>;)}
</ul>
 

<ul>
    <li>plantes d'ombre</li>
    <li>cactus</li>
    <li>plantes d'ext√©rieur</li>
    <li>plantes pour d√©butants</li>
    <li>plantes fleuries</li>
</ul>
 

<ul>
    {categories.filter(category => category.length > 0)}
</ul>
 

 const i = 0
    while(i < categories.length) {
        ++i
        return <li>{categories[i]}</li>
    }
 }
La meilleure mani√®re de g√©n√©rer une liste d'√©l√©ments React √† partir d'un tableau est d'utiliser la m√©thode  map()   permettant d'appliquer une fonction √† chaque √©l√©ment de notre tableau, puis de retourner un nouveau tableau. Ensuite, il faut lui passer une prop  key  .

La r√©ponse 1 pourrait sembler correcte, mais la prop  key   a √©t√© oubli√©e üôà. 

La r√©ponse 3, quant √† elle, n'utilise pas du tout les principes de React. Elle se contente de dupliquer le contenu, ce qui ne correspond pas du tout √† ce que nous avons appris ensemble.

Ici,  filter()   n'est pas utile et ne retourne de toute mani√®re pas d'√©l√©ment JSX : l'option 4 ne fonctionne pas non plus.

La proposition 5 utilise une boucle while ‚Äì il s'agit ici d'une instruction. Or, en JSX, nous utilisons des expressions. Cela ne fonctionne pas du tout.

La bonne r√©ponse √©tait donc la 2. 

Question 4
Parmi les phrases de cette liste, laquelle est fausse ?


Une prop est toujours pass√©e par un composant enfant √† son parent.

Une prop est consid√©r√©e en lecture seule dans le composant qui la re√ßoit.

Les props nous permettent de configurer nos composants.

Une prop est toujours pass√©e par un composant parent √† son enfant.
Comme nous l‚Äôavons vu, on peut configurer nos composants gr√¢ce aux props. Elles sont pass√©es par un composant parent √† son enfant, et consid√©r√©es en lecture seule. Les affirmations 2, 3 et 4 sont vraies.

La logique de React est descendante, les donn√©es descendent des composants parents vers les composants enfants. Il fallait donc choisir l'affirmation 1 qui est donc fausse.

Question 5
Vous cr√©ez un composant Layout pour votre application, que vous pourrez r√©utiliser si vous cr√©ez de nouvelles pages. Votre composant doit venir wrapper votre contenu, mais il ne conna√Æt pas le contenu √† l'avance. Dans le parent, vous l'√©crivez de la mani√®re suivante :

<Layout>
    <h1>Les plantes sont nos amies</h1>
    <h2>Monstera</h2>
    <p>Facile √† entretenir, le monstera saura embellir votre int√©rieur ‚ú®</p>
<Layout>
Comment pouvez-vous √©crire votre composant Layout ?

Attention, plusieurs r√©ponses sont possibles.

function Layout({child}) {
    return <div className="my-layout">{children}</div>
}

function Layout(children) {
    return <div className="my-layout">{children}</div>
}

function Layout({children}) {
    return <div className="my-layout">{children}</div>
}

function Layout(props) {
    const children = props.children
    return <div className="my-layout">{children}</div>
}
La prop children est particuli√®rement utile quand un composant ne conna√Æt pas ses enfants √† l'avance. Elle est renseign√©e en imbriquant les enfants dans le parent : <Parent><Child /></Parent>, et on la r√©cup√®re avec la prop  children  . 

L'option 1 utilise la prop  child   qui ne permet pas de r√©cup√©rer le contenu de votre composant ci-dessus. Elle n'est donc pas une r√©ponse valide.

L'option 2 utilise bien le mot cl√©  children  , sauf que le param√®tre que l'on r√©cup√®re dans la fonction Layout correspond √† l'objet  props  . Le code de l'option 2 produit une erreur parce qu'on essaie de render un objet entier.

L'option 3 d√©structure directement children dans les param√®tres, alors que l'option 4 utilise props pour ensuite r√©cup√©rer children ‚Äì mais il s'agit bien de deux syntaxes valides. Les bonnes r√©ponses sont donc la 3 et la 4. üéâ

Question 6
Dans votre banni√®re, vous rajoutez un √©l√©ment React de rempotage : en fonction du mois de l'ann√©e, vous affichez ou non "Nous sommes au Printemps : c'est le moment id√©al pour rempoter !". Vous avez d√©j√† r√©cup√©r√© le mois de l'ann√©e dans la variable  month  .

Quelle(s) syntaxe(s) vous permet(tent) d'afficher le conseil uniquement pendant le printemps ?

Attention, plusieurs r√©ponses sont possibles.

function Banner({month}) {
    return <div>
    <h1>La maison jungle</h1>
    <div>Nous sommes au printemps : c'est le moment id√©al pour rempoter !</div>
    </div>
}

function Banner({month}) {
    return <div>
    <h1>La maison jungle</h1>
    {month > 1 && month < 6 && <div>Nous sommes au printemps : c'est le moment id√©al pour rempoter !</div>
    }
    </div>
}

function Banner({month}) {
    return <div>
    <h1>La maison jungle</h1>
    {month > 1 && month < 6 ? <div>Nous sommes au printemps : c'est le moment id√©al pour rempoter !</div> : null
    }
    </div>
}
 

function Banner({month}) {
    return <div>
    <h1>La maison jungle</h1>
        {if (month > 1 && month < 6) {
        return (<div>Nous sommes au printemps : c'est le moment id√©al pour rempoter !</div>
        )
        }}
    </div>
}
L‚Äôoption 1 ne pr√©sente aucune condition : cela ne fonctionne pas.

La derni√®re option utilise une fonction  if   pour donner des instructions, sauf qu'en JSX, il s'agit d'expressions. La derni√®re option n'est donc pas valide.

En revanche, les options 2 et 3 utilisent respectivement la syntaxe  &&   et le ternaire qui utilise  null  . Elles sont des r√©ponses valides pour cr√©er une condition  si‚Ä¶ alors...   !

Question 7
Vous avez un jeu de donn√©s qui a le format suivant :

{

    id: "1fjgd4sm4",

    plantName: "Calathea Rattlesnake",

    plantDescription: "les jolies couleurs de cette plante sauront vous ravir"

}
Quelle est la meilleure prop key que vous puissiez utiliser ?


L'index de la position de chaque √©l√©ment du tableau.

id

plantDescription

J'utilise la fonction Math.random().
La prop key doit √™tre unique au sein du tableau et stable dans le temps (pour la m√™me donn√©e source, on aura toujours la m√™me valeur de key=).

L'index de la position de chaque √©l√©ment peut √™tre utilis√©, si nous n'avons pas d'alternative. Mais c‚Äôest un dernier recours et nous avons une meilleure option dans les r√©ponses.

En revanche, utiliser toute la description ne para√Æt pas judicieux : il n'y a aucune garantie que chaque description soit unique. La r√©ponse 3 ne marche pas.

Pour des soucis de performance, on √©vitera d'utiliser la fonction  Math.random() qui pourrait troubler React.

La meilleure option est toujours d'utiliser l'id natif aux donn√©es. La bonne r√©ponse est donc la r√©ponse 2. ‚ú®

Question 8
Vous voulez cr√©er une interaction avec votre bouton. Vous avez donc √©crit le code suivant :

<button onclick=handleClick>Cliquez moi ‚≠êÔ∏è</button>
√áa n'a pas l'air de marcher‚Ä¶ Que faut-il modifier ?

Attention, plusieurs r√©ponses sont possibles.

onclickn'est pas en camelCase. Il aurait fallu √©crireonClick.

La fonction n'est pas appel√©e. Pour que √ßa fonctionne, il faudrait √©crirehandleClick().

Il manque les accolades.

Il aurait fallu pr√©ciser la fonction √† appeler dans une string :onclick="handleClick()".
Ici la r√©ponse 2 ne correspond √† aucune syntaxe connue en Javascript. 

La r√©ponse 4, quant √† elle, correspond √† la syntaxe du Javascript vanilla (sans framework), mais pas √† React. 

Les √©v√©nements en React s'√©crivent en camelCase et on leur pr√©cise la fonction √† appeler entre accolades. Les bonnes r√©ponses √©taient donc la 1 et la 3.

Question 9
Pourquoi utiliser un formulaire contr√¥l√© ?

Attention, plusieurs r√©ponses sont possibles.

Il s'agit de la m√©thode conseill√©e par React.

Ils permettent de filtrer le contenu.

On peut facilement afficher un message d'erreur en fonction de la data entr√©e par l'utilisateur.

Il s'agit de la seule mani√®re de cr√©er un formulaire.
Ici, il n'y avait qu'une seule mauvaise r√©ponse : la derni√®re option.

En effet, il existe plusieurs mani√®res de cr√©er un formulaire, avec la m√©thode des composants contr√¥l√©s et des composants non contr√¥l√©s. Les bonnes r√©ponses √©taient donc la 1, la 2 et la 3.

Question 10
Vous avez un composant Header. Vous voulez que son texte soit rouge.
Vous avez √©galement un fichier CSS associ√© d√©fini de la mani√®re suivante :

.my-header {
    color: red;
}
Quelle(s) solution(s) fonctionne(nt) ?

Attention, plusieurs r√©ponses sont possibles.

function Header() {
    <h1 class='my-header'></h1>
}

function Header() {
    <h1 className='my-header'></h1>
}

function Header() {
    <h1 style='my-header'></h1>
}

function Header() {
    return (
        <h1 style={{ color: 'red' }}>Titre de l'en-t√™te</h1>
    );
}

Les classes sont l‚Äôune des mani√®res d‚Äôajouter du style √† un composant. class√©tant un mot r√©serv√© en JavaScript, il faut utiliser l‚Äôattribut classNamepour utiliser une classe dans un composant. La r√©ponse 1 ne marche donc pas en React, mais la 2e r√©ponse fonctionne bien.

Par ailleurs, l'attribut style  fait √©galement partie des m√©thodes possibles. Mais pour qu'il fonctionne, il faut passer un objet √† style, contrairement √† la r√©ponse 3. Les bonnes r√©ponses sont donc la 2 et la 4. üéâ

        ****************************************** III *****************************************
        Voici les r√©ponses et explications pour chaque question :

Question 1 : Identifiez la phrase incorrecte
R√©ponse : "On met √† jour notre state en faisant useState(nouvelleValeur)"

Explication : La mise √† jour du state se fait via la fonction de mise √† jour (par exemple, setState ou updateState), et non en appelant √† nouveau useState. La syntaxe correcte pour mettre √† jour le state serait quelque chose comme setState(nouvelleValeur).

Question 2 : Quelle(s) syntaxe(s) vous permet(tent) de r√©cup√©rer et updater votre state
R√©ponses :

const [cartValue, updateCartValue] = useState(0)
const cartState = useState(0); const cartValue = cartState[0]; const updateCartValue = cartState[1];
Explication : Ces deux syntaxes sont correctes pour d√©clarer un state et le mettre √† jour. La premi√®re utilise la d√©structuration, ce qui est plus commun, tandis que la deuxi√®me utilise une approche plus verbeuse.

Question 3 : Quelles affirmations sont vraies ?
R√©ponses :

"Les hooks n'existaient pas aux d√©buts de React"
"Un hook est une fonction qui permet de ¬´ se brancher ¬ª (to hook up) sur des fonctionnalit√©s React"
Explication : Les hooks ont √©t√© introduits dans React 16.8 et n'existaient pas √† ses d√©buts. Un hook est effectivement une fonction qui permet d'acc√©der √† des fonctionnalit√©s comme l'√©tat ou le cycle de vie des composants. useEffect et useState sont deux hooks populaires, mais il en existe d'autres. Il n'existe pas de package react-hooks sp√©cifique, et il est √©galement possible de cr√©er des hooks personnalis√©s.

Question 4 : Vous voulez partager une variable d'√©tat entre plusieurs composants
R√©ponses :

"Faire remonter ces donn√©es vers le state local du plus proche composant qui est un anc√™tre commun"
"Faire redescendre ces infos avec des props jusqu‚Äôaux composants qui en ont besoin"
"Faire ¬´ remonter ¬ª les demandes d'update en utilisant la fonction de mise √† jour du state"
Explication : Pour partager un √©tat entre plusieurs composants, l'√©tat doit √™tre maintenu dans le composant anc√™tre commun le plus proche. Ensuite, cet √©tat peut √™tre pass√© en tant que prop aux composants enfants. Pour mettre √† jour cet √©tat, les composants enfants doivent utiliser la fonction de mise √† jour pass√©e depuis le parent. Il n'est pas n√©cessaire de d√©clarer plusieurs variables de state dans chaque composant.

Question 5 : Quelles r√®gles concernant useEffect sont exactes ?
R√©ponses :

"useEffect doit toujours √™tre appel√© depuis un composant fonction"
"Il faut toujours appeler useEffect au niveau racine de votre composant, sans l'inclure dans une condition, une fonction imbriqu√©e ou une boucle"
Explication : useEffect doit toujours √™tre appel√© dans une fonction de composant et ne doit pas √™tre plac√© √† l'int√©rieur de boucles, conditions ou fonctions imbriqu√©es. Cependant, il est tout √† fait possible d'avoir plusieurs useEffect dans un m√™me composant, et vous pouvez utiliser le state dans un useEffect.

Question 6 : O√π est-ce que vous devez √©crire votre alerte ?
R√©ponse : function Welcome() { useEffect(() => { alert('Welcome! ‚òÄÔ∏è') }, []) return <div>Welcome</div> }

Explication : L'alerte doit √™tre plac√©e dans un hook useEffect avec un tableau de d√©pendances vide [] pour s'ex√©cuter uniquement lors du premier rendu (c'est-√†-dire lorsque le composant est mont√©).

Question 7 : Si vous voulez d√©clencher une alerte apr√®s la mise √† jour du panier
R√©ponse : function Cart() { useEffect(() => { alert(\Mon panier contient ${cart} √©l√©ments`) }, [cart]) return (<div> <h2>Mon panier</h2> {cart} <button onClick={() => updateCart(cart+1)}>Ajouter un √©l√©ment au panier</button> </div>) }`

Explication : Vous devez utiliser useEffect avec cart comme d√©pendance pour d√©clencher l'alerte uniquement lorsque le state cart change.

Question 8 : Meilleure mani√®re d‚Äô√©crire votre fichier App.js pour g√©rer l'√©tat global du panier
R√©ponse : function App() { const [cartValue, updateCartValue] = useState(0) return <div> <Header cartValue={cartValue} /> <Cart cartValue={cartValue} updateCartValue={updateCartValue} /> <Footer cartValue={cartValue} /> </div> }

Explication : Vous devez lever l'√©tat (lifting state) au niveau du composant parent App et passer les valeurs de cartValue et updateCartValue aux composants enfants Header et Cart via les props. Cela permet au Header de r√©agir aux changements du panier.